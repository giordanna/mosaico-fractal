/*
Este arquivo é parte do programa Mosaico Fractal

Mosaico Fractal é um software livre; você pode redistribuí-lo e/ou 
modificá-lo dentro dos termos da Licença Pública Geral GNU como 
publicada pela Fundação do Software Livre (FSF); na versão 3 da 
Licença, ou (a seu critério) qualquer versão posterior.

Este programa é distribuído na esperança de que possa ser útil, 
mas SEM NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO
a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja a
Licença Pública Geral GNU para maiores detalhes.

Você deve ter recebido uma cópia da Licença Pública Geral GNU junto
com este programa, Se não, veja <http://www.gnu.org/licenses/>.
*/

package mosaicofractal.gui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractCellEditor;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.border.Border;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import mosaicofractal.elementos.Preenchimento;
import mosaicofractal.tela.Tela;
import org.apache.batik.bridge.BridgeContext;
import org.apache.batik.bridge.GVTBuilder;
import org.apache.batik.gvt.GVTTreeWalker;
import org.apache.batik.gvt.GraphicsNode;
import static org.apache.batik.swing.svg.JSVGComponent.ALWAYS_DYNAMIC;
import org.w3c.dom.svg.SVGDocument;

/**
 * A classe <code>InterfaceUsuario</code> é usada para permitir ao usuário de 
 * interagir com o programa, podendo definir as suas opções desejadas 
 * interativamente. A construção desta classe contou fortemente com a biblioteca 
 * Swing.
 * 
 * @author      Giordanna De Gregoriis
 * @see         mosaicofractal.tela.Tela
 * @see         mosaicofractal.elementos.Estampa
 * @see         mosaicofractal.elementos.Preenchimento
 */
public class InterfaceUsuario extends javax.swing.JFrame {
    
    /**
     * Cor utilizada para o fundo da região.
     */
    private Color cor_fundo_selecionada = Color.WHITE;
    
    /**
     * Nome do arquivo SVG contendo a textura selecionada.
     */
    private String textura = "textura1.svg";
    
    /**
     * Nome do arquivo SVG contendo a estampa selecionada.
     */
    private String estampa = "estampa1.svg";
    
    /**
     * Nome do arquivo SVG contendo a forma da região a ser preenchida 
     * selecionada.
     */
    private String forma_fundo = "estampa1.svg";
    
    /**
     * Dimensão da interface, utilizada para fazer as janelas aparecerem no 
     * meio da tela.
     */
    private final Dimension dim;
    
    /**
     * Delimitação do números de colunas e linhas da tabela de cores.
     */
    private int quantidadeColunas, quantidadeLinhas;
    
    /**
     * Cria o form InterfaceUsuario
     */
    public InterfaceUsuario() {
        initComponents();
        dim = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation(dim.width/2-getSize().width/2, dim.height/2-getSize().height/2);
        
        frameEstampaEscolher.pack();
        frameEstampaEscolher.setLocation(dim.width/2-frameEstampaEscolher.getSize().width/2, dim.height/2-frameEstampaEscolher.getSize().height/2);
        
        frameTexturasEscolher.pack();
        frameTexturasEscolher.setLocation(dim.width/2-frameTexturasEscolher.getSize().width/2, dim.height/2-frameTexturasEscolher.getSize().height/2);
        
        frameCoresEscolher.pack();
        frameCoresEscolher.setLocation(dim.width/2-frameCoresEscolher.getSize().width/2, dim.height/2-frameCoresEscolher.getSize().height/2);
        
        frameVerCores.pack();
        frameVerCores.setLocation(dim.width/2-frameVerCores.getSize().width/2, dim.height/2-frameVerCores.getSize().height/2);
        
        javax.swing.ImageIcon icone = new javax.swing.ImageIcon("./img/icones/icone_small.png");
        setIconImage(icone.getImage());
        frameTexturasEscolher.setIconImage(icone.getImage());
        frameEstampaEscolher.setIconImage(icone.getImage());
        frameCoresEscolher.setIconImage(icone.getImage());
        frameVerCores.setIconImage(icone.getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupBordaTela = new javax.swing.ButtonGroup();
        buttonGroupRotacionarEstampas = new javax.swing.ButtonGroup();
        buttonGroupTelaForma = new javax.swing.ButtonGroup();
        buttonGroupTipoPreenchimento = new javax.swing.ButtonGroup();
        fileEstampaAdicionar = new javax.swing.JFileChooser();
        filePreenchimentoAdicionar = new javax.swing.JFileChooser();
        frameVerCores = new javax.swing.JFrame();
        tabelaVerCores = new javax.swing.JTable();
        frameEstampaEscolher = new javax.swing.JFrame();
        comboboxEstampas = new javax.swing.JComboBox<>();
        textoFrameEstampaCorpo = new javax.swing.JLabel();
        canvasframeEstampa = new org.apache.batik.swing.JSVGCanvas();
        botaoEstampaSelecionar = new javax.swing.JButton();
        botaoEstampaExcluir = new javax.swing.JButton();
        textoFrameEstampaPreview = new javax.swing.JLabel();
        botaoEstampaSelecionarFundo = new javax.swing.JButton();
        frameTexturasEscolher = new javax.swing.JFrame();
        comboboxTexturas = new javax.swing.JComboBox<>();
        textoFrameTexturaCorpo = new javax.swing.JLabel();
        canvasframeTextura = new org.apache.batik.swing.JSVGCanvas();
        botaoTexturaSelecionar = new javax.swing.JButton();
        botaoTexturaExcluir = new javax.swing.JButton();
        textoFrameTexturaPreview = new javax.swing.JLabel();
        frameCoresEscolher = new javax.swing.JFrame();
        textoFrameCoresCorpo = new javax.swing.JLabel();
        textoFrameCoresEstampas = new javax.swing.JLabel();
        textoFrameCoresFundo = new javax.swing.JLabel();
        panelFrameCoresFundo = new javax.swing.JPanel();
        botaoFrameCoresFundoSelecionar = new javax.swing.JButton();
        botaoVerCoresEscolher = new javax.swing.JButton();
        panelCorpo = new javax.swing.JPanel();
        textoValorC = new javax.swing.JLabel();
        spinnerValorC = new javax.swing.JSpinner();
        textoPreview = new javax.swing.JLabel();
        botaoIniciar = new javax.swing.JButton();
        textoBordaTela = new javax.swing.JLabel();
        radioBordaTelaSim = new javax.swing.JRadioButton();
        radioBordaTelaNao = new javax.swing.JRadioButton();
        textoRotacionarEstampas = new javax.swing.JLabel();
        radioRotacionarEstampasSim = new javax.swing.JRadioButton();
        radioRotacionarEstampasNao = new javax.swing.JRadioButton();
        textoTelaForma = new javax.swing.JLabel();
        radioTelaFormaSim = new javax.swing.JRadioButton();
        radioTelaFormaNao = new javax.swing.JRadioButton();
        textoTipoPreenchimento = new javax.swing.JLabel();
        radioTipoPreenchimentoCores = new javax.swing.JRadioButton();
        radioTipoPreenchimentoTexturas = new javax.swing.JRadioButton();
        panelSeparador = new javax.swing.JSeparator();
        canvasPreviewModo = new org.apache.batik.swing.JSVGCanvas();
        canvasPreviewPreenchimento = new org.apache.batik.swing.JSVGCanvas();
        textoPreviewModo = new javax.swing.JLabel();
        textoPreviewEstampa = new javax.swing.JLabel();
        textoPreviewPreenchimento = new javax.swing.JLabel();
        textoPreviewPreenchimentoCores = new javax.swing.JLabel();
        textoPreviewPreenchimentoTextura = new javax.swing.JLabel();
        canvasPreviewEstampa = new org.apache.batik.swing.JSVGCanvas();
        textoPreviewCorFundo = new javax.swing.JLabel();
        previewCorFundo = new javax.swing.JPanel();
        textoPreviewFormaFundo = new javax.swing.JLabel();
        canvasPreviewFormaFundo = new org.apache.batik.swing.JSVGCanvas();
        textoQuantidadeFormas = new javax.swing.JLabel();
        spinnerQuantidadeFormas = new javax.swing.JSpinner();
        textoIteracoes = new javax.swing.JLabel();
        spinnerIteracoes = new javax.swing.JSpinner();
        botaoVerCores = new javax.swing.JButton();
        textoTempoLimite = new javax.swing.JLabel();
        spinnerTempoLimite = new javax.swing.JSpinner();
        spinnerTempoLimite.setModel(new javax.swing.SpinnerNumberModel(1, 1, 60, 1));
        textoMinutos = new javax.swing.JLabel();
        spinnerValorN = new javax.swing.JSpinner();
        textoValorN = new javax.swing.JLabel();
        textoTitulo = new javax.swing.JLabel();
        barraMenu = new javax.swing.JMenuBar();
        menuEstampas = new javax.swing.JMenu();
        estampaAdicionar = new javax.swing.JMenuItem();
        estampaSelecionar = new javax.swing.JMenuItem();
        menuPreenchimento = new javax.swing.JMenu();
        menuCores = new javax.swing.JMenu();
        itemCoresSelecionar = new javax.swing.JMenuItem();
        menuTextura = new javax.swing.JMenu();
        itemTexturaAdicionar = new javax.swing.JMenuItem();
        itemTexturaSelecionar = new javax.swing.JMenuItem();
        menuAjuda = new javax.swing.JMenu();
        itemRepositorio = new javax.swing.JMenuItem();
        itemSobre = new javax.swing.JMenuItem();

        fileEstampaAdicionar.setFileFilter(new FileNameExtensionFilter("SVG", "svg"));

        filePreenchimentoAdicionar.setFileFilter(new FileNameExtensionFilter("SVG", "svg"));

        frameVerCores.setTitle("Visualização de cores");
        frameVerCores.setResizable(false);

        tabelaVerCores.setBackground(javax.swing.UIManager.getDefaults().getColor("TextField.disabledBackground"));
        tabelaVerCores.setModel(new modeloTabelaCores());
        tabelaVerCores.setDefaultRenderer(Color.class, new RenderizadorDeCor(true));
        tabelaVerCores.setDefaultEditor(Color.class, new EditorDeCor());
        quantidadeColunas = tabelaVerCores.getModel().getColumnCount();
        quantidadeLinhas = tabelaVerCores.getModel().getRowCount();

        javax.swing.GroupLayout frameVerCoresLayout = new javax.swing.GroupLayout(frameVerCores.getContentPane());
        frameVerCores.getContentPane().setLayout(frameVerCoresLayout);
        frameVerCoresLayout.setHorizontalGroup(
            frameVerCoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameVerCoresLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(tabelaVerCores, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        frameVerCoresLayout.setVerticalGroup(
            frameVerCoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameVerCoresLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(tabelaVerCores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        frameEstampaEscolher.setTitle("Escolher Estampas");
        frameEstampaEscolher.setResizable(false);
        frameEstampaEscolher.setType(java.awt.Window.Type.POPUP);

        comboboxEstampas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "estampa1.svg", "estampa2.svg" }));
        comboboxEstampas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboboxEstampasActionPerformed(evt);
            }
        });

        textoFrameEstampaCorpo.setText("Escolha uma das estampas disponíveis e selecione a sua opção desejada:");

        canvasframeEstampa.setBackground(java.awt.SystemColor.control);
        canvasframeEstampa.setEnableImageZoomInteractor(false);
        canvasframeEstampa.setEnablePanInteractor(false);
        canvasframeEstampa.setEnableResetTransformInteractor(false);
        canvasframeEstampa.setEnableRotateInteractor(false);
        canvasframeEstampa.setEnableZoomInteractor(false);
        canvasframeEstampa.setPreferredSize(new java.awt.Dimension(150, 150));

        try{
            File g = new File("img/estampas/estampa1.svg").getCanonicalFile();
            canvasframeEstampa.setURI(g.toURI().toString());
        }
        catch(java.io.IOException e){
        }

        botaoEstampaSelecionar.setText("Selecionar como Estampa");
        botaoEstampaSelecionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoEstampaSelecionarActionPerformed(evt);
            }
        });

        botaoEstampaExcluir.setText("Excluir Arquivo");
        botaoEstampaExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoEstampaExcluirActionPerformed(evt);
            }
        });

        textoFrameEstampaPreview.setText("Preview:");

        botaoEstampaSelecionarFundo.setText("Selecionar como Fundo");
        botaoEstampaSelecionarFundo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoEstampaSelecionarFundoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout frameEstampaEscolherLayout = new javax.swing.GroupLayout(frameEstampaEscolher.getContentPane());
        frameEstampaEscolher.getContentPane().setLayout(frameEstampaEscolherLayout);
        frameEstampaEscolherLayout.setHorizontalGroup(
            frameEstampaEscolherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameEstampaEscolherLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frameEstampaEscolherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(textoFrameEstampaCorpo)
                    .addGroup(frameEstampaEscolherLayout.createSequentialGroup()
                        .addGroup(frameEstampaEscolherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(frameEstampaEscolherLayout.createSequentialGroup()
                                .addComponent(comboboxEstampas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(textoFrameEstampaPreview)
                                .addGap(18, 18, 18))
                            .addGroup(frameEstampaEscolherLayout.createSequentialGroup()
                                .addGroup(frameEstampaEscolherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(botaoEstampaSelecionar)
                                    .addComponent(botaoEstampaSelecionarFundo)
                                    .addComponent(botaoEstampaExcluir))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(canvasframeEstampa, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        frameEstampaEscolherLayout.setVerticalGroup(
            frameEstampaEscolherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameEstampaEscolherLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textoFrameEstampaCorpo)
                .addGap(18, 18, 18)
                .addGroup(frameEstampaEscolherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(frameEstampaEscolherLayout.createSequentialGroup()
                        .addGroup(frameEstampaEscolherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboboxEstampas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textoFrameEstampaPreview))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botaoEstampaSelecionar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoEstampaSelecionarFundo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoEstampaExcluir))
                    .addComponent(canvasframeEstampa, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        frameTexturasEscolher.setTitle("Escolher Texturas");
        frameTexturasEscolher.setResizable(false);

        comboboxTexturas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "textura1.svg" }));
        comboboxTexturas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboboxTexturasActionPerformed(evt);
            }
        });

        textoFrameTexturaCorpo.setText("Escolha uma das texturas disponíveis e selecione a sua opção desejada:");

        canvasframeTextura.setBackground(java.awt.SystemColor.control);
        canvasframeTextura.setEnableImageZoomInteractor(false);
        canvasframeTextura.setEnablePanInteractor(false);
        canvasframeTextura.setEnableResetTransformInteractor(false);
        canvasframeTextura.setEnableRotateInteractor(false);
        canvasframeTextura.setEnableZoomInteractor(false);
        canvasframeTextura.setPreferredSize(new java.awt.Dimension(150, 150));

        try{
            File g = new File("img/texturas/textura1.svg").getCanonicalFile();
            canvasframeTextura.setURI(g.toURI().toString());
        }
        catch(java.io.IOException e){
        }

        botaoTexturaSelecionar.setText("Selecionar");
        botaoTexturaSelecionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoTexturaSelecionarActionPerformed(evt);
            }
        });

        botaoTexturaExcluir.setText("Excluir");
        botaoTexturaExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoTexturaExcluirActionPerformed(evt);
            }
        });

        textoFrameTexturaPreview.setText("Preview:");

        javax.swing.GroupLayout frameTexturasEscolherLayout = new javax.swing.GroupLayout(frameTexturasEscolher.getContentPane());
        frameTexturasEscolher.getContentPane().setLayout(frameTexturasEscolherLayout);
        frameTexturasEscolherLayout.setHorizontalGroup(
            frameTexturasEscolherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameTexturasEscolherLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frameTexturasEscolherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(frameTexturasEscolherLayout.createSequentialGroup()
                        .addComponent(textoFrameTexturaCorpo)
                        .addGap(0, 5, Short.MAX_VALUE))
                    .addGroup(frameTexturasEscolherLayout.createSequentialGroup()
                        .addGroup(frameTexturasEscolherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(frameTexturasEscolherLayout.createSequentialGroup()
                                .addComponent(botaoTexturaSelecionar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(botaoTexturaExcluir))
                            .addGroup(frameTexturasEscolherLayout.createSequentialGroup()
                                .addComponent(comboboxTexturas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(textoFrameTexturaPreview)))
                        .addGap(18, 18, 18)
                        .addComponent(canvasframeTextura, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        frameTexturasEscolherLayout.setVerticalGroup(
            frameTexturasEscolherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameTexturasEscolherLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textoFrameTexturaCorpo)
                .addGap(18, 18, 18)
                .addGroup(frameTexturasEscolherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(frameTexturasEscolherLayout.createSequentialGroup()
                        .addGroup(frameTexturasEscolherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboboxTexturas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textoFrameTexturaPreview))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(frameTexturasEscolherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botaoTexturaSelecionar)
                            .addComponent(botaoTexturaExcluir)))
                    .addComponent(canvasframeTextura, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        frameCoresEscolher.setTitle("Escolher Cores");
        frameCoresEscolher.setResizable(false);

        textoFrameCoresCorpo.setText("Escolha as cores desejadas:");

        textoFrameCoresEstampas.setText("Estampas:");

        textoFrameCoresFundo.setText("Para o fundo:");

        panelFrameCoresFundo.setBackground(new java.awt.Color(255, 255, 255));
        panelFrameCoresFundo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout panelFrameCoresFundoLayout = new javax.swing.GroupLayout(panelFrameCoresFundo);
        panelFrameCoresFundo.setLayout(panelFrameCoresFundoLayout);
        panelFrameCoresFundoLayout.setHorizontalGroup(
            panelFrameCoresFundoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );
        panelFrameCoresFundoLayout.setVerticalGroup(
            panelFrameCoresFundoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        botaoFrameCoresFundoSelecionar.setText("Selecionar");
        botaoFrameCoresFundoSelecionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoFrameCoresFundoSelecionarActionPerformed(evt);
            }
        });

        botaoVerCoresEscolher.setText("Ver Cores");
        botaoVerCoresEscolher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoVerCoresEscolherActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout frameCoresEscolherLayout = new javax.swing.GroupLayout(frameCoresEscolher.getContentPane());
        frameCoresEscolher.getContentPane().setLayout(frameCoresEscolherLayout);
        frameCoresEscolherLayout.setHorizontalGroup(
            frameCoresEscolherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameCoresEscolherLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frameCoresEscolherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frameCoresEscolherLayout.createSequentialGroup()
                        .addGroup(frameCoresEscolherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textoFrameCoresCorpo)
                            .addComponent(textoFrameCoresEstampas)
                            .addComponent(textoFrameCoresFundo)
                            .addGroup(frameCoresEscolherLayout.createSequentialGroup()
                                .addComponent(panelFrameCoresFundo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(botaoFrameCoresFundoSelecionar)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(botaoVerCoresEscolher, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        frameCoresEscolherLayout.setVerticalGroup(
            frameCoresEscolherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frameCoresEscolherLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textoFrameCoresCorpo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textoFrameCoresEstampas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(botaoVerCoresEscolher)
                .addGap(18, 18, 18)
                .addComponent(textoFrameCoresFundo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(frameCoresEscolherLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelFrameCoresFundo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoFrameCoresFundoSelecionar)))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mosaico Fractal");
        setResizable(false);

        textoValorC.setText("Valor de c:");

        spinnerValorC.setModel(new javax.swing.SpinnerNumberModel(1.53d, 1.01d, 2d, 0.01d));

        textoPreview.setText("Preview:");

        botaoIniciar.setText("Iniciar");
        botaoIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoIniciarActionPerformed(evt);
            }
        });

        textoBordaTela.setText("Considerar as bordas da tela como limites do mosaico?");

        buttonGroupBordaTela.add(radioBordaTelaSim);
        radioBordaTelaSim.setSelected(true);
        radioBordaTelaSim.setText("Sim");
        radioBordaTelaSim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBordaTelaSimActionPerformed(evt);
            }
        });

        buttonGroupBordaTela.add(radioBordaTelaNao);
        radioBordaTelaNao.setText("Não");
        radioBordaTelaNao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBordaTelaNaoActionPerformed(evt);
            }
        });

        textoRotacionarEstampas.setText("Rotacionar as estampas aleatoriamente?");

        buttonGroupRotacionarEstampas.add(radioRotacionarEstampasSim);
        radioRotacionarEstampasSim.setText("Sim");
        radioRotacionarEstampasSim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioRotacionarEstampasSimActionPerformed(evt);
            }
        });

        buttonGroupRotacionarEstampas.add(radioRotacionarEstampasNao);
        radioRotacionarEstampasNao.setSelected(true);
        radioRotacionarEstampasNao.setText("Não");
        radioRotacionarEstampasNao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioRotacionarEstampasNaoActionPerformed(evt);
            }
        });

        textoTelaForma.setText("A tela terá uma forma específica?");

        buttonGroupTelaForma.add(radioTelaFormaSim);
        radioTelaFormaSim.setText("Sim");
        radioTelaFormaSim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioTelaFormaSimActionPerformed(evt);
            }
        });

        buttonGroupTelaForma.add(radioTelaFormaNao);
        radioTelaFormaNao.setSelected(true);
        radioTelaFormaNao.setText("Não");
        radioTelaFormaNao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioTelaFormaNaoActionPerformed(evt);
            }
        });

        textoTipoPreenchimento.setText("O que será usado como preenchimento?");

        buttonGroupTipoPreenchimento.add(radioTipoPreenchimentoCores);
        radioTipoPreenchimentoCores.setSelected(true);
        radioTipoPreenchimentoCores.setText("Cores");
        radioTipoPreenchimentoCores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioTipoPreenchimentoCoresActionPerformed(evt);
            }
        });

        buttonGroupTipoPreenchimento.add(radioTipoPreenchimentoTexturas);
        radioTipoPreenchimentoTexturas.setText("Texturas");
        radioTipoPreenchimentoTexturas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioTipoPreenchimentoTexturasActionPerformed(evt);
            }
        });

        canvasPreviewModo.setBackground(new java.awt.Color(240, 240, 240));
        canvasPreviewModo.setEnableImageZoomInteractor(false);
        canvasPreviewModo.setEnablePanInteractor(false);
        canvasPreviewModo.setEnableResetTransformInteractor(false);
        canvasPreviewModo.setEnableRotateInteractor(false);
        canvasPreviewModo.setEnableZoomInteractor(false);
        canvasPreviewModo.setPreferredSize(new java.awt.Dimension(100, 100));

        try{
            File g = new File("img/icones/modo_sem_forma_nao_rotaciona_com_limite.svg").getCanonicalFile();
            canvasPreviewModo.setURI(g.toURI().toString());
        }
        catch(java.io.IOException e){
        }

        canvasPreviewPreenchimento.setBackground(new java.awt.Color(240, 240, 240));
        canvasPreviewPreenchimento.setDocumentState(ALWAYS_DYNAMIC);
        canvasPreviewPreenchimento.setEnableImageZoomInteractor(false);
        canvasPreviewPreenchimento.setEnablePanInteractor(false);
        canvasPreviewPreenchimento.setEnableResetTransformInteractor(false);
        canvasPreviewPreenchimento.setEnableRotateInteractor(false);
        canvasPreviewPreenchimento.setEnableZoomInteractor(false);
        canvasPreviewPreenchimento.setPreferredSize(new java.awt.Dimension(100, 100));

        textoPreviewModo.setText("Modo:");

        textoPreviewEstampa.setText("Estampa(s):");

        textoPreviewPreenchimento.setText("Preenchimento:");

        textoPreviewPreenchimentoCores.setText("Cores? Sim. Sendo elas:");

        textoPreviewPreenchimentoTextura.setForeground(java.awt.SystemColor.textInactiveText);
        textoPreviewPreenchimentoTextura.setText("Textura? Não.");

        canvasPreviewEstampa.setBackground(new java.awt.Color(240, 240, 240));
        canvasPreviewEstampa.setDocument(null);
        canvasPreviewEstampa.setDocumentState(ALWAYS_DYNAMIC);
        canvasPreviewEstampa.setEnableImageZoomInteractor(false);
        canvasPreviewEstampa.setEnablePanInteractor(false);
        canvasPreviewEstampa.setEnableResetTransformInteractor(false);
        canvasPreviewEstampa.setEnableRotateInteractor(false);
        canvasPreviewEstampa.setEnableZoomInteractor(false);
        canvasPreviewEstampa.setPreferredSize(new java.awt.Dimension(100, 100));

        try{
            File g = new File("img/estampas/estampa1.svg").getCanonicalFile();
            canvasPreviewEstampa.setURI(g.toURI().toString());
        }
        catch(java.io.IOException e){
        }

        textoPreviewCorFundo.setText("Cor do Fundo:");

        previewCorFundo.setBackground(new java.awt.Color(255, 255, 255));
        previewCorFundo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        previewCorFundo.setPreferredSize(new java.awt.Dimension(20, 20));

        javax.swing.GroupLayout previewCorFundoLayout = new javax.swing.GroupLayout(previewCorFundo);
        previewCorFundo.setLayout(previewCorFundoLayout);
        previewCorFundoLayout.setHorizontalGroup(
            previewCorFundoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );
        previewCorFundoLayout.setVerticalGroup(
            previewCorFundoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        textoPreviewFormaFundo.setText("Fundo normal.");

        canvasPreviewFormaFundo.setBackground(new java.awt.Color(240, 240, 240));
        canvasPreviewFormaFundo.setDocumentState(ALWAYS_DYNAMIC);
        canvasPreviewFormaFundo.setEnableImageZoomInteractor(false);
        canvasPreviewFormaFundo.setEnablePanInteractor(false);
        canvasPreviewFormaFundo.setEnableResetTransformInteractor(false);
        canvasPreviewFormaFundo.setEnableRotateInteractor(false);
        canvasPreviewFormaFundo.setEnableZoomInteractor(false);
        canvasPreviewFormaFundo.setPreferredSize(new java.awt.Dimension(100, 100));

        textoQuantidadeFormas.setText("Formas:");

        spinnerQuantidadeFormas.setModel(new javax.swing.SpinnerNumberModel(1000, 10, 90000, 1));

        textoIteracoes.setText("Iterações:");

        spinnerIteracoes.setModel(new javax.swing.SpinnerNumberModel(1000, 100, 400000, 1));

        botaoVerCores.setText("Ver Cores");
        botaoVerCores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoVerCoresActionPerformed(evt);
            }
        });

        textoTempoLimite.setText("Tempo limite:");

        textoMinutos.setText("(em minutos)");

        spinnerValorN.setModel(new javax.swing.SpinnerNumberModel(3d, 1d, 100d, 1d));

        textoValorN.setText("Valor de N:");

        javax.swing.GroupLayout panelCorpoLayout = new javax.swing.GroupLayout(panelCorpo);
        panelCorpo.setLayout(panelCorpoLayout);
        panelCorpoLayout.setHorizontalGroup(
            panelCorpoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCorpoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCorpoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelSeparador)
                    .addGroup(panelCorpoLayout.createSequentialGroup()
                        .addGroup(panelCorpoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelCorpoLayout.createSequentialGroup()
                                .addGroup(panelCorpoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textoPreviewModo)
                                    .addComponent(canvasPreviewModo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panelCorpoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(canvasPreviewEstampa, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textoPreviewEstampa))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panelCorpoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textoPreviewFormaFundo)
                                    .addComponent(canvasPreviewFormaFundo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panelCorpoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textoPreviewPreenchimento)
                                    .addGroup(panelCorpoLayout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addGroup(panelCorpoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(textoPreviewPreenchimentoCores)
                                            .addComponent(textoPreviewPreenchimentoTextura)
                                            .addComponent(textoPreviewCorFundo)
                                            .addComponent(previewCorFundo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(botaoVerCores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(6, 6, 6)
                                .addComponent(canvasPreviewPreenchimento, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelCorpoLayout.createSequentialGroup()
                                .addGroup(panelCorpoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(panelCorpoLayout.createSequentialGroup()
                                        .addComponent(textoTipoPreenchimento)
                                        .addGap(272, 272, 272)
                                        .addComponent(textoTempoLimite))
                                    .addGroup(panelCorpoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(panelCorpoLayout.createSequentialGroup()
                                            .addComponent(radioTelaFormaSim)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(radioTelaFormaNao))
                                        .addGroup(panelCorpoLayout.createSequentialGroup()
                                            .addComponent(radioRotacionarEstampasSim)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(radioRotacionarEstampasNao))
                                        .addComponent(textoBordaTela)
                                        .addGroup(panelCorpoLayout.createSequentialGroup()
                                            .addComponent(radioBordaTelaSim)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(radioBordaTelaNao))
                                        .addComponent(textoRotacionarEstampas)
                                        .addComponent(textoTelaForma)
                                        .addComponent(textoPreview)
                                        .addGroup(panelCorpoLayout.createSequentialGroup()
                                            .addGroup(panelCorpoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(panelCorpoLayout.createSequentialGroup()
                                                    .addComponent(textoValorC)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(spinnerValorC, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(textoValorN))
                                                .addComponent(botaoIniciar))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(spinnerValorN, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(textoQuantidadeFormas)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(spinnerQuantidadeFormas, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(textoIteracoes)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(spinnerIteracoes, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(spinnerTempoLimite, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(panelCorpoLayout.createSequentialGroup()
                                            .addComponent(radioTipoPreenchimentoCores)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(radioTipoPreenchimentoTexturas)
                                            .addGap(343, 343, 343)
                                            .addComponent(textoMinutos))))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        panelCorpoLayout.setVerticalGroup(
            panelCorpoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCorpoLayout.createSequentialGroup()
                .addComponent(textoBordaTela)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCorpoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioBordaTelaSim)
                    .addComponent(radioBordaTelaNao))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textoRotacionarEstampas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCorpoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioRotacionarEstampasSim)
                    .addComponent(radioRotacionarEstampasNao))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textoTelaForma)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCorpoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioTelaFormaSim)
                    .addComponent(radioTelaFormaNao))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCorpoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textoTipoPreenchimento, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textoTempoLimite))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCorpoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioTipoPreenchimentoCores)
                    .addComponent(radioTipoPreenchimentoTexturas)
                    .addComponent(textoMinutos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCorpoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textoValorC)
                    .addComponent(spinnerValorC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerValorN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textoValorN)
                    .addComponent(textoQuantidadeFormas)
                    .addComponent(spinnerQuantidadeFormas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textoIteracoes)
                    .addComponent(spinnerIteracoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerTempoLimite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoIniciar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textoPreview)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelSeparador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(panelCorpoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textoPreviewModo)
                    .addComponent(textoPreviewEstampa)
                    .addComponent(textoPreviewPreenchimento)
                    .addComponent(textoPreviewFormaFundo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCorpoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(canvasPreviewModo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(canvasPreviewPreenchimento, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(canvasPreviewEstampa, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelCorpoLayout.createSequentialGroup()
                        .addComponent(textoPreviewPreenchimentoCores)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botaoVerCores)
                        .addGap(3, 3, 3)
                        .addComponent(textoPreviewPreenchimentoTextura)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textoPreviewCorFundo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(previewCorFundo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(canvasPreviewFormaFundo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        textoTitulo.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        textoTitulo.setText("Mosaico Fractal");

        menuEstampas.setText("Estampas");

        estampaAdicionar.setText("Adicionar...");
        estampaAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                estampaAdicionarActionPerformed(evt);
            }
        });
        menuEstampas.add(estampaAdicionar);

        estampaSelecionar.setText("Selecionar...");
        estampaSelecionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                estampaSelecionarActionPerformed(evt);
            }
        });
        menuEstampas.add(estampaSelecionar);

        barraMenu.add(menuEstampas);

        menuPreenchimento.setText("Preenchimento");

        menuCores.setText("Cores");

        itemCoresSelecionar.setText("Selecionar...");
        itemCoresSelecionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCoresSelecionarActionPerformed(evt);
            }
        });
        menuCores.add(itemCoresSelecionar);

        menuPreenchimento.add(menuCores);

        menuTextura.setText("Textura");

        itemTexturaAdicionar.setText("Adicionar...");
        itemTexturaAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemTexturaAdicionarActionPerformed(evt);
            }
        });
        menuTextura.add(itemTexturaAdicionar);

        itemTexturaSelecionar.setText("Selecionar...");
        itemTexturaSelecionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemTexturaSelecionarActionPerformed(evt);
            }
        });
        menuTextura.add(itemTexturaSelecionar);

        menuPreenchimento.add(menuTextura);

        barraMenu.add(menuPreenchimento);

        menuAjuda.setText("Ajuda");

        itemRepositorio.setText("Repositório do Projeto");
        itemRepositorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemRepositorioActionPerformed(evt);
            }
        });
        menuAjuda.add(itemRepositorio);

        itemSobre.setText("Sobre");
        itemSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSobreActionPerformed(evt);
            }
        });
        menuAjuda.add(itemSobre);

        barraMenu.add(menuAjuda);

        setJMenuBar(barraMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelCorpo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textoTitulo)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(textoTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelCorpo, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Método utilizado para quando o valor do botão de rádio 
     * de radioTelaFormaSim for pressionado. O botão está relacionado ao 
     * formato personalizado da tela. Caso esteja marcado, deve marcar 
     * automaticamente o botão de rádio sobre considerar limites inclusivos da 
     * região. 
     * 
     * Verica-se também se o botão de rádio sobre rotacionar estampas está 
     * marcado, para poder mudar o ícone do preview de acordo. 
     * 
     * Também modifica o valor do texto sobre o preview da forma da região, e
     * troca o ícone do preview da forma do fundo.
     * 
     * @param evt evento da seleção do botão.
     * @see #trocaIconeEstampa(org.apache.batik.swing.JSVGCanvas, java.awt.Shape)
     * @see #trocaPreviewIconeModo(java.lang.String) 
     */
    private void radioTelaFormaSimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioTelaFormaSimActionPerformed
        if (!radioBordaTelaSim.isSelected()){
            radioBordaTelaSim.setSelected(true);
        }
        if (radioRotacionarEstampasSim.isSelected()) {
            trocaPreviewIconeModo("modo_com_forma_sim_rotaciona");
        }
        else {
            trocaPreviewIconeModo("modo_com_forma_nao_rotaciona");
        }
        
        textoPreviewFormaFundo.setText("Forma do fundo:");
        trocaIconeEstampa(canvasPreviewFormaFundo, forma_fundo);
    }//GEN-LAST:event_radioTelaFormaSimActionPerformed
    
    /**
     * Método utilizado para quando o valor do botão de rádio 
     * de radioBordaTelaNao for pressionado. O botão está relacionado aos 
     * limites da tela. Verifica se o botão sobre forma personalizada da região 
     * está marcado como "não". Se estiver marcado como sim, marca como não, e 
     * Atualiza o texto do preview da estampa da forma da tela para fundo 
     * normal, e insere uma forma vazia no lugar.
     * 
     * Verifica também se o botão de rádio sobre rotacionar estampas está 
     * marcado, e atualiza o ícone de acordo com o estado.
     * 
     * @param evt evento da seleção do botão.
     * @see #deixaVazio(org.apache.batik.swing.JSVGCanvas)
     * @see #trocaPreviewIconeModo(java.lang.String) 
     */
    private void radioBordaTelaNaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBordaTelaNaoActionPerformed
        if (!radioTelaFormaNao.isSelected()){
            radioTelaFormaNao.setSelected(true);
            textoPreviewFormaFundo.setText("Fundo normal.");
            deixaVazio(canvasPreviewFormaFundo);
        }
        if (radioRotacionarEstampasSim.isSelected()) {
            trocaPreviewIconeModo("modo_sem_forma_sim_rotaciona_sem_limite");
        }
        else {
            trocaPreviewIconeModo("modo_sem_forma_nao_rotaciona_sem_limite");
        }
    }//GEN-LAST:event_radioBordaTelaNaoActionPerformed
    
    /**
     * Método utilizado para quando o valor do botão de rádio 
     * de radioTelaFormaNao for pressionado. O botão está relacionado ao 
     * formato personalizado da tela. Verica-se se o botão de rádio sobre 
     * rotacionar estampas está marcado, para poder mudar o ícone do preview 
     * de acordo.
     * 
     * Verica-se também o botão de rádio sobre considerar limites inclusivos 
     * ou periódicos da tela, para poder mudar o ícone do preview de acordo. 
     * 
     * Atualiza o texto do preview da estampa da forma da tela para fundo 
     * normal, e insere uma forma vazia no lugar.
     * 
     * @param evt evento da seleção do botão.
     * @see #deixaVazio(org.apache.batik.swing.JSVGCanvas)
     * @see #trocaPreviewIconeModo(java.lang.String)
     */
    private void radioTelaFormaNaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioTelaFormaNaoActionPerformed

        if (radioRotacionarEstampasSim.isSelected()) {
            if (radioBordaTelaSim.isSelected()) {
                trocaPreviewIconeModo("modo_sem_forma_sim_rotaciona_com_limite");
            }
            else {
                trocaPreviewIconeModo("modo_sem_forma_sim_rotaciona_sem_limite");
            }
        }
        else {
            if (radioBordaTelaSim.isSelected()) {
                trocaPreviewIconeModo("modo_sem_forma_nao_rotaciona_com_limite");
            }
            else {
                trocaPreviewIconeModo("modo_sem_forma_nao_rotaciona_sem_limite");
            }
        }
        textoPreviewFormaFundo.setText("Fundo normal.");
        deixaVazio(canvasPreviewFormaFundo);
    }//GEN-LAST:event_radioTelaFormaNaoActionPerformed
    
    /**
     * Método utilizado para quando o valor do botão de rádio 
     * de radioTipoPreenchimentoCores for pressionado. Atualiza os textos 
     * relacionados ao preenchimento das estampas para cores.
     * 
     * @param evt evento da seleção do botão.
     * @see #deixaVazio(org.apache.batik.swing.JSVGCanvas) 
     */
    private void radioTipoPreenchimentoCoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioTipoPreenchimentoCoresActionPerformed
        if (!"Cores? Sim. Sendo elas:".equals(textoPreviewPreenchimentoCores.getText())){
            textoPreviewPreenchimentoCores.setText("Cores? Sim. Sendo elas:");
            textoPreviewPreenchimentoCores.setForeground(java.awt.Color.BLACK);
            botaoVerCores.setVisible(true);
        }
        if ("Textura? Sim. Sendo ela:".equals(textoPreviewPreenchimentoTextura.getText())){
            textoPreviewPreenchimentoTextura.setText("Textura? Não.");
            textoPreviewPreenchimentoTextura.setForeground(java.awt.SystemColor.textInactiveText);
            deixaVazio(canvasPreviewPreenchimento);
        }
    }//GEN-LAST:event_radioTipoPreenchimentoCoresActionPerformed
    
    /**
     * Método utilizado para quando o valor do botão de rádio 
     * de radioTipoPreenchimentoTexturas for pressionado. Atualiza os textos 
     * relacionados ao preenchimento das estampas para texturas.
     * 
     * @param evt evento da seleção do botão.
     * @see #trocaIconeTextura(org.apache.batik.swing.JSVGCanvas, java.lang.String) 
     */
    private void radioTipoPreenchimentoTexturasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioTipoPreenchimentoTexturasActionPerformed
        if ("Cores? Sim. Sendo elas:".equals(textoPreviewPreenchimentoCores.getText())){
            textoPreviewPreenchimentoCores.setText("Cores? Não.");
            textoPreviewPreenchimentoCores.setForeground(java.awt.SystemColor.textInactiveText);
            botaoVerCores.setVisible(false);
        }
        if (!"Textura? Sim. Sendo ela:".equals(textoPreviewPreenchimentoTextura.getText())){
            textoPreviewPreenchimentoTextura.setText("Textura? Sim. Sendo ela:");
            textoPreviewPreenchimentoTextura.setForeground(java.awt.Color.BLACK);
        }
        
        trocaIconeTextura(canvasPreviewPreenchimento, textura);
    }//GEN-LAST:event_radioTipoPreenchimentoTexturasActionPerformed
    
    /**
     * Método utilizado para quando o valor do botão de rádio 
     * de radioBordaTelaSim for pressionado. O botão está relacionado aos 
     * limites da região da tela. Verica-se se o botão de rádio sobre 
     * a tela com forma personalizada marcada e se o botão de rádio sobre 
     * rotacionar estampas está marcado, para poder mudar o ícone do preview de acordo.
     * 
     * @param evt evento da seleção do botão.
     * @see #trocaPreviewIconeModo(java.lang.String) 
     */
    private void radioBordaTelaSimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBordaTelaSimActionPerformed
        if (radioTelaFormaSim.isSelected()) {
            if (radioRotacionarEstampasSim.isSelected()) {
                trocaPreviewIconeModo("modo_com_forma_sim_rotaciona");
            }
            else {
                trocaPreviewIconeModo("modo_com_forma_nao_rotaciona");
            }
        }
        else {
            if (radioRotacionarEstampasSim.isSelected()) {
                trocaPreviewIconeModo("modo_sem_forma_sim_rotaciona_com_limite");
            }
            else {
                trocaPreviewIconeModo("modo_sem_forma_nao_rotaciona_com_limite");
            }
        }
    }//GEN-LAST:event_radioBordaTelaSimActionPerformed
    
    /**
     * Método utilizado para quando o valor do botão de rádio 
     * de radioRotacionarEstampasSim for pressionado. O botão está relacionado as 
     * rotações das estampas na tela. Verica-se se o botão de rádio sobre 
     * a tela com forma personalizada marcada e se o botão de rádio sobre 
     * limites inclusivos está marcado, para poder mudar o ícone do preview de acordo.
     * 
     * @param evt evento da seleção do botão.
     * @see #trocaPreviewIconeModo(java.lang.String) 
     */
    private void radioRotacionarEstampasSimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioRotacionarEstampasSimActionPerformed
        if (radioTelaFormaSim.isSelected()) {
            trocaPreviewIconeModo("modo_com_forma_sim_rotaciona");
        }
        else {
            if (radioBordaTelaSim.isSelected()) {
                trocaPreviewIconeModo("modo_sem_forma_sim_rotaciona_com_limite");
            }
            else {
                trocaPreviewIconeModo("modo_sem_forma_sim_rotaciona_sem_limite");
            }
        }
    }//GEN-LAST:event_radioRotacionarEstampasSimActionPerformed
    
    /**
     * Método utilizado para quando o valor do botão de rádio 
     * de radioRotacionarEstampasNao for pressionado. O botão está relacionado as 
     * rotações das estampas na tela. Verica-se se o botão de rádio sobre 
     * a tela com forma personalizada marcada e se o botão de rádio sobre 
     * limites inclusivos está marcado, para poder mudar o ícone do preview de acordo.
     * 
     * @param evt evento da seleção do botão.
     * @see #trocaPreviewIconeModo(java.lang.String) 
     */
    private void radioRotacionarEstampasNaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioRotacionarEstampasNaoActionPerformed
        if (radioTelaFormaSim.isSelected()) {
            trocaPreviewIconeModo("modo_com_forma_nao_rotaciona");
        }
        else {
            if (radioBordaTelaSim.isSelected()) {
                trocaPreviewIconeModo("modo_sem_forma_nao_rotaciona_com_limite");
            }
            else {
                trocaPreviewIconeModo("modo_sem_forma_nao_rotaciona_sem_limite");
            }
        }
    }//GEN-LAST:event_radioRotacionarEstampasNaoActionPerformed
    
    /**
     * Método utilizado para quando o valor do botão estampaSelecionar for 
     * pressionado. O botão está relacionado as estampas na tela. Atualiza as 
     * instâncias das estampas na listagem e torna a janela de escolha de 
     * estampa visível.
     * 
     * @param evt evento da seleção do botão.
     * @see #atualizarEstampas() 
     */
    private void estampaSelecionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_estampaSelecionarActionPerformed
        atualizarEstampas();
        frameEstampaEscolher.setLocation(dim.width/2-frameEstampaEscolher.getSize().width/2, dim.height/2-frameEstampaEscolher.getSize().height/2);
        frameEstampaEscolher.setVisible(true);
    }//GEN-LAST:event_estampaSelecionarActionPerformed
    
    /**
     * Método utilizado para quando o valor do botão estampaAdicionar for 
     * pressionado. O botão está relacionado as estampas na tela. Abre uma 
     * janela de JFileChooser para selecionar e inserir o arquivo no diretório 
     * de estampas salvas.
     * 
     * @param evt evento da seleção do botão.
     */
    private void estampaAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_estampaAdicionarActionPerformed
        int retorno = fileEstampaAdicionar.showOpenDialog(this);
        if (retorno == javax.swing.JFileChooser.APPROVE_OPTION){
            File arquivo = fileEstampaAdicionar.getSelectedFile();
            canvasframeEstampa.setURI(arquivo.toURI().toString());
            File copia;
            try {
                copia = new File("./img/estampas/estampa" + numeroEstampa() + ".svg").getCanonicalFile();
                Files.copy(arquivo.toPath(),copia.toPath(), REPLACE_EXISTING);
            } catch (IOException ex) {
                Logger.getLogger(InterfaceUsuario.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_estampaAdicionarActionPerformed
    
    /**
     * Método utilizado para quando o valor do botão texturaAdicionar for 
     * pressionado. O botão está relacionado as texturas das estampas. Abre uma 
     * janela de JFileChooser para selecionar e inserir o arquivo no diretório 
     * de texturas salvas.
     * 
     * @param evt evento da seleção do botão.
     */
    private void itemTexturaAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemTexturaAdicionarActionPerformed
        int retorno = filePreenchimentoAdicionar.showOpenDialog(this);
        if (retorno == javax.swing.JFileChooser.APPROVE_OPTION){
            File arquivo = filePreenchimentoAdicionar.getSelectedFile();
            File copia;
            try {
                copia = new File("./img/texturas/textura" + numeroTextura() + ".svg").getCanonicalFile();
                Files.copy(arquivo.toPath(),copia.toPath(), REPLACE_EXISTING);
            } catch (IOException ex) {
                Logger.getLogger(InterfaceUsuario.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_itemTexturaAdicionarActionPerformed
    
    /**
     * Método utilizado para quando o valor da combobox de estampas for 
     * modificada. O botão está relacionado as estampas salvas. Modifica-se o
     * ícone de previsualização da estampa escolhida.
     * 
     * @param evt evento da seleção do botão.
     * @see #trocaIconeEstampa(org.apache.batik.swing.JSVGCanvas, java.lang.String) 
     */
    private void comboboxEstampasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboboxEstampasActionPerformed
        trocaIconeEstampa(canvasframeEstampa, (String) comboboxEstampas.getSelectedItem());
    }//GEN-LAST:event_comboboxEstampasActionPerformed
    
    /**
     * Método utilizado para quando o valor do botão texturaSelecionar for 
     * pressionado. O botão está relacionado as texturas das estampas. Atualiza 
     * as instâncias das texturas na listagem e torna a janela de escolha de 
     * textura visível.
     * 
     * @param evt evento da seleção do botão.
     * @see #atualizarEstampas() 
     */
    private void itemTexturaSelecionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemTexturaSelecionarActionPerformed
        atualizarTexturas();
        frameTexturasEscolher.setLocation(dim.width/2-frameTexturasEscolher.getSize().width/2, dim.height/2-frameTexturasEscolher.getSize().height/2);
        frameTexturasEscolher.setVisible(true);
    }//GEN-LAST:event_itemTexturaSelecionarActionPerformed
    
    /**
     * Método utilizado para quando o valor do botão coresSelecionar for 
     * pressionado. O botão está relacionado as cores em geral. Torna a 
     * janela de escolha de cores visível.
     * 
     * @param evt evento da seleção do botão.
     */
    private void itemCoresSelecionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCoresSelecionarActionPerformed
        frameCoresEscolher.setLocation(dim.width/2-frameCoresEscolher.getSize().width/2, dim.height/2-frameCoresEscolher.getSize().height/2);
        frameCoresEscolher.setVisible(true);
    }//GEN-LAST:event_itemCoresSelecionarActionPerformed
    
    /**
     * Método utilizado para quando o valor da combobox de texturas for 
     * modificada. O botão está relacionado as texturas salvas. Modifica-se o
     * ícone de previsualização da textura escolhida.
     * 
     * @param evt evento da seleção do botão.
     * @see #trocaIconeEstampa(org.apache.batik.swing.JSVGCanvas, java.lang.String) 
     */
    private void comboboxTexturasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboboxTexturasActionPerformed
        trocaIconeTextura(canvasframeTextura, (String) comboboxTexturas.getSelectedItem());
    }//GEN-LAST:event_comboboxTexturasActionPerformed
    
    /**
     * Método utilizado para quando o valor da combobox de estampas for 
     * selecionada. O botão está relacionado as estampas salvas. Salva-se o 
     * da estampa escolhida e Modifica-se o ícone de previsualização da estampa 
     * escolhida.
     * 
     * @param evt evento da seleção do botão.
     * @see #trocaIconeEstampa(org.apache.batik.swing.JSVGCanvas, java.lang.String) 
     */
    private void botaoEstampaSelecionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoEstampaSelecionarActionPerformed
        estampa = (String) comboboxEstampas.getSelectedItem();
        trocaIconeEstampa(canvasPreviewEstampa, estampa);
    }//GEN-LAST:event_botaoEstampaSelecionarActionPerformed
    
    /**
     * Método utilizado para quando o valor do botão estampaSelecionarFundo for 
     * pressionado. O botão está relacionado ao formato da tela. Salva o nome 
     * da estampa selecionada e atualiza o ícone da estampa do fundo.
     * 
     * @param evt evento da seleção do botão.
     * @see #trocaIconeEstampa(org.apache.batik.swing.JSVGCanvas, java.lang.String) 
     */
    private void botaoEstampaSelecionarFundoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoEstampaSelecionarFundoActionPerformed
        forma_fundo = (String) comboboxEstampas.getSelectedItem();
        if (radioTelaFormaSim.isSelected())
            trocaIconeEstampa(canvasPreviewFormaFundo, forma_fundo);
    }//GEN-LAST:event_botaoEstampaSelecionarFundoActionPerformed
    
    /**
     * Método utilizado para quando o valor da combobox de texturas for 
     * selecionada. O botão está relacionado as texturas salvas. Salva-se o 
     * nome da textura escolhida e modifica-se o ícone de previsualização da 
     * textura escolhida.
     * 
     * @param evt evento da seleção do botão.
     * @see #trocaIconeTextura(org.apache.batik.swing.JSVGCanvas, java.lang.String) 
     */
    private void botaoTexturaSelecionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoTexturaSelecionarActionPerformed
        textura = (String) comboboxTexturas.getSelectedItem();
        if (radioTipoPreenchimentoTexturas.isSelected())
            trocaIconeTextura(canvasPreviewPreenchimento, textura);
    }//GEN-LAST:event_botaoTexturaSelecionarActionPerformed
    
    /**
     * Método utilizado para quando o botão de exclusão de texturas for 
     * selecionada. O botão está relacionado as texturas salvas. Verifica-se 
     * se a textura a ser excluída não é uma das primeiras, remove-se o 
     * arquivo do diretório e atualiza os ícones de prévisualização.
     * 
     * @param evt evento da seleção do botão.
     * @see #trocaIconeTextura(org.apache.batik.swing.JSVGCanvas, java.lang.String)
     * @see #atualizarTexturas()
     */
    private void botaoTexturaExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoTexturaExcluirActionPerformed
        String nome = (String) comboboxTexturas.getSelectedItem();
        if (nome.equals("textura1.svg") || nome.equals("textura2.svg")) {
            javax.swing.JOptionPane.showMessageDialog(this,
                    "Não pode deletar este arquivo. Foi feito com muito carinho. :(",
                    "Erro",javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        else{
            if (nome.equals(textura)){
                textura = "textura1.svg";
                if (radioTipoPreenchimentoTexturas.isSelected())
                    trocaIconeTextura(canvasPreviewPreenchimento, textura);
            }
            File arquivo = new File("./img/texturas/" + nome);
            arquivo.delete();
            atualizarTexturas();
            
        }
    }//GEN-LAST:event_botaoTexturaExcluirActionPerformed
    
    /**
     * Método utilizado para quando o botão de exclusão de estampas for 
     * selecionada. O botão está relacionado as estampas salvas. Verifica-se 
     * se a estampas a ser excluída não é uma das primeiras, remove-se o 
     * arquivo do diretório e atualiza os ícones de prévisualização.
     * 
     * @param evt evento da seleção do botão.
     * @see #trocaIconeEstampa(org.apache.batik.swing.JSVGCanvas, java.lang.String)
     * @see #atualizarEstampas()
     */
    private void botaoEstampaExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoEstampaExcluirActionPerformed
        String nome = (String) comboboxEstampas.getSelectedItem();
        if (nome.equals("estampa1.svg") || nome.equals("estampa2.svg") || nome.equals("estampa3.svg")) {
            javax.swing.JOptionPane.showMessageDialog(this,
                    "Não pode deletar este arquivo. Foi feito com muito carinho. :(",
                    "Erro",javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        else{
            if (nome.equals(estampa)){
                estampa = "estampa1.svg";
                trocaIconeEstampa(canvasPreviewEstampa, estampa);
            }
            
            if (nome.equals(forma_fundo)){
                forma_fundo = "estampa1.svg";
                if (radioTelaFormaSim.isSelected())
                    trocaIconeEstampa(canvasPreviewFormaFundo, forma_fundo);
            }
            
            File arquivo = new File("./img/estampas/" + nome);
            arquivo.delete();
            atualizarEstampas();
        }
    }//GEN-LAST:event_botaoEstampaExcluirActionPerformed
    
    /**
     * Método utilizado para quando o botão de escolha de cor do fundo for 
     * selecionada. O botão está relacionado a cor de fundo da região. 
     * Abre-se uma janela JColorChooser para o usuário selecionar uma cor, 
     * atualizando caso verdadeiro.
     * 
     * @param evt evento da seleção do botão.
     * @see #atualizaCoresPreview(javax.swing.JPanel, java.awt.Color)
     * @see #atualizaCoresFrame(javax.swing.JPanel, java.awt.Color)
     */
    private void botaoFrameCoresFundoSelecionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoFrameCoresFundoSelecionarActionPerformed
        Color nova_cor = javax.swing.JColorChooser.showDialog(this, "Escolha a cor do fundo", cor_fundo_selecionada);
        if (nova_cor != null) {
            cor_fundo_selecionada = nova_cor;
            atualizaCoresPreview(previewCorFundo, cor_fundo_selecionada);
            atualizaCoresFrame(panelFrameCoresFundo, cor_fundo_selecionada);
        }
    }//GEN-LAST:event_botaoFrameCoresFundoSelecionarActionPerformed
    
    /**
     * Método utilizado para quando o botão de iniciar for selecionado, e é 
     * aqui que retira-se as formas dos documentos SVG.
     * 
     * @param evt evento da seleção do botão.
     * @see 
     * @see mosaicofractal.tela.Tela
     * @see mosaicofractal.tela.Tela#preencherArea(java.util.ArrayList, java.awt.Shape, java.util.ArrayList, java.awt.Color, double, int, int) 
     */
    private void botaoIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoIniciarActionPerformed
        Shape shape_tela = null;

        BridgeContext contexto = canvasPreviewEstampa.getUpdateManager().getBridgeContext();
        SVGDocument documento = canvasPreviewEstampa.getSVGDocument();
        contexto.setDynamicState(BridgeContext.DYNAMIC); 
        GVTBuilder gvt = new GVTBuilder(); 
        GraphicsNode nodo = gvt.build(contexto, documento); 
        GVTTreeWalker arvore = new GVTTreeWalker(nodo); 
        ArrayList<Shape> array_formas = new ArrayList<>();
        arvore.nextGraphicsNode(); // passa a GeneralPath
        while ( (nodo = arvore.nextGraphicsNode()) != null) { 
            array_formas.add(nodo.getOutline());
            System.out.println("ESTAMPA: " + nodo.getOutline());
        } 
        
        if (array_formas.isEmpty()){
            javax.swing.JOptionPane.showMessageDialog(this,
                    "O arquivo SVG não possui forma(s). Não poderá ser utilizada. :(",
                    "Erro",javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        else{
            System.out.println("TOTAL DE FORMAS DE ESTAMPA: " + array_formas.size());
            try{
                if (radioTelaFormaSim.isSelected()) {
                    // forma da tela
                    contexto = canvasPreviewFormaFundo.getUpdateManager().getBridgeContext();
                    documento = canvasPreviewFormaFundo.getSVGDocument();
                    contexto.setDynamicState(BridgeContext.DYNAMIC); 
                    gvt = new GVTBuilder(); 
                    nodo = gvt.build(contexto, documento); 
                    arvore = new GVTTreeWalker(nodo);
                    arvore.nextGraphicsNode();
                    nodo = arvore.nextGraphicsNode();
                    shape_tela = nodo.getOutline();
                    System.out.println("TELA: " + shape_tela);
                }

                // cores ou textura
                ArrayList<Preenchimento> preenchimentos = new ArrayList<>();

                if (radioTipoPreenchimentoTexturas.isSelected()) {
                    preenchimentos.add(new Preenchimento(criarImagem(canvasPreviewPreenchimento)));
                }
                else { //cores
                    Color aux;

                    for (int i = 0 ; i < quantidadeColunas ; i++) {
                        for (int j = 0 ; j < quantidadeLinhas ; j++) {
                            aux = (Color) tabelaVerCores.getModel().getValueAt(j, i);
                            if (aux.getAlpha() != 0) {
                                preenchimentos.add(new Preenchimento(aux));
                            }
                        }
                    }

                    if (preenchimentos.isEmpty()) {
                        preenchimentos.add(new Preenchimento(Color.BLACK));
                    }
                    System.out.println("TOTAL DE CORES: " + preenchimentos.size());
                }

                Tela.tela = new Tela(radioBordaTelaSim.isSelected(), radioRotacionarEstampasSim.isSelected(), radioTelaFormaSim.isSelected(), radioTipoPreenchimentoTexturas.isSelected(), (int) spinnerTempoLimite.getValue());
                Tela.tela.preencherArea(array_formas, shape_tela, preenchimentos, cor_fundo_selecionada, (double) spinnerValorC.getValue(), (double) spinnerValorN.getValue(), (int) spinnerQuantidadeFormas.getValue(), (int) spinnerIteracoes.getValue());
                
            } catch (java.lang.NullPointerException ex){
                javax.swing.JOptionPane.showMessageDialog(this,
                        "O arquivo SVG não possui forma(s). Não poderá ser utilizada. :(",
                        "Erro",javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_botaoIniciarActionPerformed
    
    /**
     * Método utilizado para quando o valor do botão verCores for 
     * pressionado. O botão está relacionado as cores das estampas. Torna a 
     * janela de escolha de cores visível.
     * 
     * @param evt evento da seleção do botão.
     */
    private void botaoVerCoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoVerCoresActionPerformed
        frameVerCores.setLocation(dim.width/2-frameVerCores.getSize().width/2, dim.height/2-frameVerCores.getSize().height/2);
        frameVerCores.setVisible(true);
    }//GEN-LAST:event_botaoVerCoresActionPerformed
    
    /**
     * Método utilizado para quando o valor do botão verCores for 
     * pressionado. O botão está relacionado as cores das estampas. Torna a 
     * janela de escolha de cores visível.
     * 
     * @param evt evento da seleção do botão.
     */
    private void botaoVerCoresEscolherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoVerCoresEscolherActionPerformed
        frameVerCores.setLocation(dim.width/2-frameVerCores.getSize().width/2, dim.height/2-frameVerCores.getSize().height/2);
        frameVerCores.setVisible(true);
    }//GEN-LAST:event_botaoVerCoresEscolherActionPerformed
    
    /**
     * Abre uma janela informando sobre o software e a licença.
     * 
     * @param evt evento da seleção do botão.
     */
    private void itemSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSobreActionPerformed
        String texto = "Mosaico Fractal v1.0.\n" +
                "\nAutora: Giordanna De Gregoriis\n" +
                "\nEste programa é software livre; Você pode redistribuí-lo e/ou modificá-lo sob os termos da Licença Pública Geral GNU publicada pela Free Software Foundation; Quer a versão 2 da Licença, ou (à sua opção) qualquer versão posterior.\n" +
                "\n" +
                "Este programa é distribuído na esperança de que ele será útil, mas SEM QUALQUER GARANTIA; Sem mesmo a garantia implícita de COMERCIALIZAÇÃO ou ADEQUAÇÃO A UM DETERMINADO PROPÓSITO. Consulte a Licença Pública Geral GNU para obter mais detalhes.\n" +
                "\n" +
                "Você deve ter recebido uma cópia da Licença Pública Geral GNU juntamente com este programa; Se não, escreva para a Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, EUA.";
        javax.swing.JTextArea msg = new javax.swing.JTextArea(texto);
        
        msg.setEditable(false);
        msg.setLineWrap(true);
        msg.setWrapStyleWord(true);

        javax.swing.JScrollPane scrollPane = new javax.swing.JScrollPane(msg);

        javax.swing.JOptionPane.showMessageDialog(null, scrollPane, "Sobre", javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_itemSobreActionPerformed
    
    /**
     * Abre página do repositório no browser.
     * 
     * @param evt evento da seleção do botão.
     */
    private void itemRepositorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemRepositorioActionPerformed
        try {
            java.net.URI uri = new java.net.URI("https://bitbucket.org/giordanna/mosaico-fractal/");
            java.awt.Desktop desktop = java.awt.Desktop.isDesktopSupported() ? java.awt.Desktop.getDesktop() : null;
            if (desktop != null && desktop.isSupported(java.awt.Desktop.Action.BROWSE)) {
                try {
                    desktop.browse(uri);
                } catch (Exception e) {
                }
            }
        } catch (java.net.URISyntaxException use) {
            throw new AssertionError(use + ": https://bitbucket.org/giordanna/mosaico-fractal/");
        }
    }//GEN-LAST:event_itemRepositorioActionPerformed

    /**
     * Método principal que inicializa o programa.
     * 
     * @param args argumentos por linha de comando
     */
    public static void main(String args[]) {
        /* Define o look and feel do SO */
        try {
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        }
        catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(InterfaceUsuario.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        /* Cria e torna visível o form */
        java.awt.EventQueue.invokeLater(() -> {
            new InterfaceUsuario().setVisible(true);
        });
    }
    
    /**
     * Método utilizado para trocar o ícone de pré-visualização das opções 
     * marcadas pelo usuário.
     * 
     * @param arquivo nome do arquivo SVG
     */
    private void trocaPreviewIconeModo(String arquivo) {
        try{
            File g = new File("./img/icones/" + arquivo + ".svg").getCanonicalFile();
            canvasPreviewModo.setURI(g.toURI().toString());
        }
        catch(java.io.IOException e){}
    }
    
    /**
     * Método utilizado para trocar o ícone de pré-visualização da textura 
     * escolhida pelo usuário.
     * 
     * @param canvas canvas onde será desenhado o gráfico SVG
     * @param arquivo nome do arquivo SVG
     */
    private void trocaIconeTextura(org.apache.batik.swing.JSVGCanvas canvas, String arquivo) {
        try{
            File g = new File("./img/texturas/" + arquivo).getCanonicalFile();
            canvas.setURI(g.toURI().toString());
        }
        catch(java.io.IOException e){}
    }
    
    /**
     * Método utilizado para trocar o ícone de pré-visualização da estampa 
     * escolhida pelo usuário.
     * 
     * @param canvas canvas onde será desenhado o gráfico SVG
     * @param arquivo nome do arquivo SVG
     */
    private void trocaIconeEstampa(org.apache.batik.swing.JSVGCanvas canvas, String arquivo) {
        try{
            File g = new File("./img/estampas/" + arquivo).getCanonicalFile();
            canvas.setURI(g.toURI().toString());
        }
        catch(java.io.IOException e){}
    }
    
    /**
     * Método para trocar o ícone para uma imagem vazia.
     * 
     * @param canvas canvas onde será desenhado o gráfico SVG transparente
     */
    private void deixaVazio(org.apache.batik.swing.JSVGCanvas canvas) {
        try{
            File g = new File("./img/vazio.svg").getCanonicalFile();
            canvas.setURI(g.toURI().toString());
        }
        catch(java.io.IOException e){}
    }
    
    /**
     * Busca uma numeração ainda não existente para nomear a estampa.
     * 
     * @return numeração ainda não-existente para estampa
     */
    private int numeroEstampa() {
        try {
            int v = 1;
            File salva = new File("./img/estampas/estampa" + v + ".svg").getCanonicalFile();
            while (salva.exists()){
                v++;
                salva = new File("./img/estampas/estampa" + v + ".svg").getCanonicalFile();
            }
            return v;
        } catch (IOException ex) {
            Logger.getLogger(InterfaceUsuario.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return 0;
    }
    
    /**
     * Busca uma numeração ainda não existente para nomear a textura.
     * 
     * @return numeração ainda não-existente para textura
     */
    private int numeroTextura(){
        try{
            int v = 1;
            File salva = new File("./img/texturas/textura" + v + ".svg").getCanonicalFile();
            while (salva.exists()){
                v++;
                salva = new File("./img/texturas/textura" + v + ".svg").getCanonicalFile();
            }
            return v;
        } catch (IOException ex) {
            Logger.getLogger(InterfaceUsuario.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return 0;
    }
    
    /**
     * Método utilizado para atualizar a listagem da combobox sobre estampas.
     */
    private void atualizarEstampas() {
        File folder = new File("./img/estampas");

        File[] lista_arquivos = folder.listFiles();
        ArrayList<String> nomes_arquivos = new ArrayList<>();
        for (File x : lista_arquivos) {
            if (x.isFile()) {
                nomes_arquivos.add(x.getName());
            }
        }
        String [] valores = new String[nomes_arquivos.size()];
        for (int i = 0 ; i < nomes_arquivos.size() ; i++)
            valores[i] = nomes_arquivos.get(i);
        
        comboboxEstampas.setModel(new javax.swing.DefaultComboBoxModel<>(valores));
        trocaIconeEstampa(canvasframeEstampa, (String) comboboxEstampas.getSelectedItem());
    }
    
    /**
     * Método utilizado para atualizar a listagem da combobox sobre texturas.
     */
    private void atualizarTexturas() {
        File folder = new File("./img/texturas");

        File[] lista_arquivos = folder.listFiles();
        ArrayList<String> nomes_arquivos = new ArrayList<>();
        for (File x : lista_arquivos) {
            if (x.isFile()) {
                nomes_arquivos.add(x.getName());
            }
        }
        
        String [] valores = new String[nomes_arquivos.size()];
        for (int i = 0 ; i < nomes_arquivos.size() ; i++)
            valores[i] = nomes_arquivos.get(i);
        
        comboboxTexturas.setModel(new javax.swing.DefaultComboBoxModel<>(valores));
        trocaIconeTextura(canvasframeTextura, (String) comboboxTexturas.getSelectedItem());
    }
    
    /**
     * Método para atualizar a cor de fundo do previw JPanel selecionado.
     * 
     * @param preview JPanel que trata de mostrar a cor escolhida
     * @param cor cor escolhida
     */
    private void atualizaCoresPreview(javax.swing.JPanel preview, Color cor) {
        if (cor != null) {
            preview.setBackground(cor);
            preview.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
        }
        else {
            preview.setBackground(new java.awt.Color(240, 240, 240));
            preview.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        }
    }
    
    /**
     * Método para atualizar a cor de fundo do JPanel selecionado, usado para 
     * a cor de fundo da região.
     * 
     * @param preview JPanel que trata de mostrar a cor escolhida
     * @param cor cor escolhida
     */
    private void atualizaCoresFrame(javax.swing.JPanel preview, Color cor) {
        if (cor != null) {
            preview.setBackground(cor);
        }
        else {
            preview.setBackground(new java.awt.Color(240, 240, 240));
        }
    }
    
    //TODO: buscar melhor maneira de utilizar uma textura para as formas, 
    //preferencialmente uma textura não-rasterizada. A qualidade da textura 
    //se encontra muito baixa, por conta da resolução 100x100 do canvas.
    /**
     * Cria uma imagem rasterizada para a textura.
     * 
     * @param canvas gráficos SVG a ser rasterizados
     * @return imagem rasterizada
     */
    private BufferedImage criarImagem(org.apache.batik.swing.JSVGCanvas canvas) {
        BufferedImage imagem = new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB);
        Graphics2D cg = imagem.createGraphics();
        canvas.paintAll(cg);
        //cg.scale(5, 5); <-- não funcionou, continua com qualidade baixa
        return imagem;
    }
    
    /**
    * A classe <code>EditorDeCor</code> é usada para encapsular as funções do 
    * com relação a escolha de cores para as estampas, definidos através da 
    * {@link InterfaceUsuario}. 
    * 
    * @author      Giordanna De Gregoriis
    * @see         InterfaceUsuario
    */
    public class EditorDeCor extends AbstractCellEditor implements
            TableCellEditor, ActionListener {
        
        /**
         * Cor escolhida na célula da tabela.
         */
        Color corAtual;
        
        /**
         * Botão de escolha da cor.
         */
        JButton botao;
        
        /**
         * Contrutor da célula.
         */
        public EditorDeCor() {
            botao = new JButton();
            botao.addActionListener(this);
            botao.setBorderPainted(false);
        }
        
        /**
         * Sobrescrita de ação, onde abre-se um JColorChooser para o usuário 
         * escolher uma cor para a célula.
         * 
         * @param e evento do clique da célula.
         */
        @Override
        public void actionPerformed(ActionEvent e) {
            botao.setBackground(corAtual);
            Color nova_cor = javax.swing.JColorChooser.showDialog(InterfaceUsuario.this, "Escolha a cor desejada para as estampas", corAtual);
            if (nova_cor != null) {
                corAtual = nova_cor;
            }
            fireEditingStopped();
        }

        /**
         * Sobrescrita de método para retornar o valor da célula.
         * 
         * @return cor da célula
         */
        @Override
        public Object getCellEditorValue() {
            return corAtual;
        }
        
        /**
         * Sobrescrita de método para retornar o componente da célula.
         * 
         * @return botão da célula
         */
        @Override
        public Component getTableCellEditorComponent(JTable table, Object value,
                boolean isSelected, int row, int column) {
            corAtual = (Color)value;
            return botao;
        }
    }

    /**
    * A classe <code>RenderizadorDeCor</code> é usada para encapsular as funções do 
    * com relação a renderização de cores no modelo de tabela de visualização 
    * de cores, definidas através da {@link InterfaceUsuario}. 
    * 
    * @author      Giordanna De Gregoriis
    * @see         InterfaceUsuario
    */
    public class RenderizadorDeCor extends JLabel implements TableCellRenderer {
        
        /**
         * Borda da célula não selecionada.
         */
        Border bordaNaoSelecionada = null;
        
        /**
         * Borda da célula selecionada.
         */
        Border bordaSelecionada = null;
        
        /**
         * Verificador se a célula possui borda ou não.
         */
        boolean isComBorda = true;
        
        /**
         * Instancia o renderizador de cor.
         * 
         * @param isBordered verificador se a célula possuirá borda ou não
         */
        public RenderizadorDeCor(boolean isBordered) {
            this.isComBorda = isBordered;
            setOpaque(true);
        }
        
        /**
         * Sobrescrita de método para retornar componente de renderização de 
         * célula da tabela. Insere a borda na célula quando não está 
         * selecionada.
         * 
         * @param tabela tabela JTable
         * @param cor cor da célula
         * @param estaSelecionada se a célula está selecionada ou não
         * @param estaFocada se a tabela está em foco ou não
         * @param linha linha da tabela onde contém a célula
         * @param coluna coluna da tabela onde contém a célula
         * @return componente de renderização
         */
        @Override
        public Component getTableCellRendererComponent( JTable tabela, Object cor,
                boolean estaSelecionada, boolean estaFocada, int linha, int coluna) {
            Color novaCor = (Color)cor;
            setBackground(novaCor);
            if (isComBorda) {
                if (estaSelecionada) {
                    if (bordaSelecionada == null) {
                        bordaSelecionada = BorderFactory.createMatteBorder(2,5,2,5,
                                tabela.getSelectionBackground());
                    }
                    setBorder(bordaSelecionada);
                } else {
                    if (bordaNaoSelecionada == null) {
                        bordaNaoSelecionada = BorderFactory.createMatteBorder(2,5,2,5,
                                tabela.getBackground());
                    }
                    setBorder(bordaNaoSelecionada);
                }
            }

        String texto;
        
        if (novaCor.getAlpha() == 0) {
            texto = "Tecnicamente vazio";
        }
        else{
           texto = "Cores RGBA: " + novaCor.getRed() + ", " + 
                novaCor.getGreen() + ", " + novaCor.getBlue() + ", " + 
                novaCor.getAlpha();
        }
        
        setToolTipText(texto);
            return this;
        }
    }
    
    /**
    * A classe <code>modeloTabelaCores</code> é usada para ser o modelo de 
    * tabela para a visualização de cores, definidas através da 
    * {@link InterfaceUsuario}.
    * 
    * @author      Giordanna De Gregoriis
    * @see         InterfaceUsuario
    * @see         InterfaceUsuario.EditorDeCor
    * @see         InterfaceUsuario.RenderizadorDeCor
    */
    class modeloTabelaCores extends AbstractTableModel {
        
        /**
         * Cor representando que a célula está vazia. Necessário ter alfa = 0.
         */
        Color vazio = new Color(0,0,0,0);
        
        /**
         * Nomes das colunas do modelo da tabela.
         */
        private String[] columnNames = {"", "", "", "", ""};
        
        /**
         * Conteúdo das células do modelo da tabela.
         */
        private Object[][] data = {
            {Color.BLACK, vazio, vazio, vazio, vazio},
            {vazio, vazio, vazio, vazio, vazio},
            {vazio, vazio, vazio, vazio, vazio},
            {vazio, vazio, vazio, vazio, vazio},
            {vazio, vazio, vazio, vazio, vazio},
            {vazio, vazio, vazio, vazio, vazio},
            {vazio, vazio, vazio, vazio, vazio},
            {vazio, vazio, vazio, vazio, vazio},
            {vazio, vazio, vazio, vazio, vazio},
            {vazio, vazio, vazio, vazio, vazio},
            };
        
        /**
         * Sobrescrita de método que retorna a quantidade de colunas do modelo.
         * 
         * @return quantidade de colunas
         */
        @Override
        public int getColumnCount() {
            return columnNames.length;
        }
        
        /**
         * Sobrescrita de método que retorna a quantidade de linhas do modelo.
         * 
         * @return quantidade de linhas
         */
        @Override
        public int getRowCount() {
            return data.length;
        }
        
        /**
         * Sobrescrita de método que retorna a o nome da coluna do modelo.
         * 
         * @return nome da coluna
         */
        @Override
        public String getColumnName(int col) {
            return columnNames[col];
        }
        
        /**
         * Sobrescrita de método que retorna o valor contido na célula escolhida.
         * 
         * @return valor da célula
         */
        @Override
        public Object getValueAt(int row, int col) {
            return data[row][col];
        }
        
        /**
         * Sobrescrita de método que retorna a classe da coluna escolhida.
         * 
         * @return quantidade de linhas
         */
        @Override
        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }
        
        /**
         * Sobrescrita de método que verifica se a célula é editável ou não.
         * 
         * @return se a célula é editável ou não
         */
        @Override
        public boolean isCellEditable(int row, int col) {
            return col >= 0;
        }
        
        /**
         * Sobrescrita de método que define o valor da célula no modelo.
         */
        @Override
        public void setValueAt(Object value, int row, int col) {
            data[row][col] = value;
            fireTableCellUpdated(row, col);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JButton botaoEstampaExcluir;
    private javax.swing.JButton botaoEstampaSelecionar;
    private javax.swing.JButton botaoEstampaSelecionarFundo;
    private javax.swing.JButton botaoFrameCoresFundoSelecionar;
    private javax.swing.JButton botaoIniciar;
    private javax.swing.JButton botaoTexturaExcluir;
    private javax.swing.JButton botaoTexturaSelecionar;
    private javax.swing.JButton botaoVerCores;
    private javax.swing.JButton botaoVerCoresEscolher;
    private javax.swing.ButtonGroup buttonGroupBordaTela;
    private javax.swing.ButtonGroup buttonGroupRotacionarEstampas;
    private javax.swing.ButtonGroup buttonGroupTelaForma;
    private javax.swing.ButtonGroup buttonGroupTipoPreenchimento;
    private org.apache.batik.swing.JSVGCanvas canvasPreviewEstampa;
    private org.apache.batik.swing.JSVGCanvas canvasPreviewFormaFundo;
    private org.apache.batik.swing.JSVGCanvas canvasPreviewModo;
    private org.apache.batik.swing.JSVGCanvas canvasPreviewPreenchimento;
    private org.apache.batik.swing.JSVGCanvas canvasframeEstampa;
    private org.apache.batik.swing.JSVGCanvas canvasframeTextura;
    private javax.swing.JComboBox<String> comboboxEstampas;
    private javax.swing.JComboBox<String> comboboxTexturas;
    private javax.swing.JMenuItem estampaAdicionar;
    private javax.swing.JMenuItem estampaSelecionar;
    private javax.swing.JFileChooser fileEstampaAdicionar;
    private javax.swing.JFileChooser filePreenchimentoAdicionar;
    private javax.swing.JFrame frameCoresEscolher;
    private javax.swing.JFrame frameEstampaEscolher;
    private javax.swing.JFrame frameTexturasEscolher;
    private javax.swing.JFrame frameVerCores;
    private javax.swing.JMenuItem itemCoresSelecionar;
    private javax.swing.JMenuItem itemRepositorio;
    private javax.swing.JMenuItem itemSobre;
    private javax.swing.JMenuItem itemTexturaAdicionar;
    private javax.swing.JMenuItem itemTexturaSelecionar;
    private javax.swing.JMenu menuAjuda;
    private javax.swing.JMenu menuCores;
    private javax.swing.JMenu menuEstampas;
    private javax.swing.JMenu menuPreenchimento;
    private javax.swing.JMenu menuTextura;
    private javax.swing.JPanel panelCorpo;
    private javax.swing.JPanel panelFrameCoresFundo;
    private javax.swing.JSeparator panelSeparador;
    private javax.swing.JPanel previewCorFundo;
    private javax.swing.JRadioButton radioBordaTelaNao;
    private javax.swing.JRadioButton radioBordaTelaSim;
    private javax.swing.JRadioButton radioRotacionarEstampasNao;
    private javax.swing.JRadioButton radioRotacionarEstampasSim;
    private javax.swing.JRadioButton radioTelaFormaNao;
    private javax.swing.JRadioButton radioTelaFormaSim;
    private javax.swing.JRadioButton radioTipoPreenchimentoCores;
    private javax.swing.JRadioButton radioTipoPreenchimentoTexturas;
    private javax.swing.JSpinner spinnerIteracoes;
    private javax.swing.JSpinner spinnerQuantidadeFormas;
    private javax.swing.JSpinner spinnerTempoLimite;
    private javax.swing.JSpinner spinnerValorC;
    private javax.swing.JSpinner spinnerValorN;
    private javax.swing.JTable tabelaVerCores;
    private javax.swing.JLabel textoBordaTela;
    private javax.swing.JLabel textoFrameCoresCorpo;
    private javax.swing.JLabel textoFrameCoresEstampas;
    private javax.swing.JLabel textoFrameCoresFundo;
    private javax.swing.JLabel textoFrameEstampaCorpo;
    private javax.swing.JLabel textoFrameEstampaPreview;
    private javax.swing.JLabel textoFrameTexturaCorpo;
    private javax.swing.JLabel textoFrameTexturaPreview;
    private javax.swing.JLabel textoIteracoes;
    private javax.swing.JLabel textoMinutos;
    private javax.swing.JLabel textoPreview;
    private javax.swing.JLabel textoPreviewCorFundo;
    private javax.swing.JLabel textoPreviewEstampa;
    private javax.swing.JLabel textoPreviewFormaFundo;
    private javax.swing.JLabel textoPreviewModo;
    private javax.swing.JLabel textoPreviewPreenchimento;
    private javax.swing.JLabel textoPreviewPreenchimentoCores;
    private javax.swing.JLabel textoPreviewPreenchimentoTextura;
    private javax.swing.JLabel textoQuantidadeFormas;
    private javax.swing.JLabel textoRotacionarEstampas;
    private javax.swing.JLabel textoTelaForma;
    private javax.swing.JLabel textoTempoLimite;
    private javax.swing.JLabel textoTipoPreenchimento;
    private javax.swing.JLabel textoTitulo;
    private javax.swing.JLabel textoValorC;
    private javax.swing.JLabel textoValorN;
    // End of variables declaration//GEN-END:variables
}
